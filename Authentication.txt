

### 1️⃣ `pom.xml` Dependencies

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt</artifactId>
        <version>0.9.1</version>
    </dependency>
</dependencies>


### 2️⃣ `JwtUtil.java` – Utility to generate JWT

package com.example.jwt.util;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
public class JwtUtil {
    private final String SECRET_KEY = "my_secret_key";

    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuer("MyApp")
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60)) // 1 hour
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }
}

### 3️⃣ `AuthRequest.java` – Login DTO

package com.example.jwt.model;

public class AuthRequest {
    private String username;
    private String password;

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
}


### 4️⃣ `AuthController.java` – Authentication Endpoint

package com.example.jwt.controller;

import com.example.jwt.model.AuthRequest;
import com.example.jwt.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/auth")
public class AuthController {

    @Autowired
    private JwtUtil jwtUtil;

    @PostMapping("/login")
    public Map<String, String> login(@RequestBody AuthRequest authRequest) {
        Map<String, String> response = new HashMap<>();

        // Dummy user validation
        if ("admin".equals(authRequest.getUsername()) && "password".equals(authRequest.getPassword())) {
            String token = jwtUtil.generateToken(authRequest.getUsername());
            response.put("token", token);
        } else {
            response.put("error", "Invalid username or password");
        }
        return response;
    }
}

### 5️⃣ `SpringRestHandsonApplication.java`

package com.example.jwt;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringRestHandsonApplication {
    public static void main(String[] args) {
        SpringApplication.run(SpringRestHandsonApplication.class, args);
    }
}


### Output

#### POST `/auth/login`

**Request Body**

{
  "username": "admin",
  "password": "password"
}


**Response**

{
  "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlzcyI6Ik15QXBwIiwiaWF0Ijox... (JWT token)"
}


#### POST `/auth/login` (Wrong credentials)

**Request Body**

{
  "username": "admin",
  "password": "wrong"
}


**Response**
S
{
  "error": "Invalid username or password"
}
```